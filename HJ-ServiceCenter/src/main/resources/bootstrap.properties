spring.application.name=HJ-ServiceCenter
spring.profiles.active=dev
eureka.environment=${spring.profiles.active}
server.port=8761

#######Eureka服务端配置 #######

#关闭eurekaserver自保护模式
#eureka.server.enableSelfPreservation=false
#eureka server刷新readCacheMap的时间，注意，client读取的是readCacheMap，这个时间决定了多久会把readWriteCacheMap的缓存更新到readCacheMap上
eureka.server.responseCacheUpdateInvervalMs=500
#过期实例清理时间间隔
eureka.server.evictionIntervalTimerInMs=500
#eureka server缓存readWriteCacheMap失效时间，这个只有在这个时间过去后缓存才会失效，失效前不会更新，过期后从registry重新读取注册服务信息，registry是一个ConcurrentHashMap。
#当注册表信息被改变时，则其被保存在缓存中不失效的时间.
eureka.server.responseCacheAutoExpirationInSeconds=10
#监控检测的阈值
#关于配置解释可以参考https://stackoverflow.com/questions/33921557/understanding-spring-cloud-eureka-server-self-preservation-and-renew-threshold
eureka.server.renewalPercentThreshold=0.49

#######Eureka实例配置#######
#服务过期时间配置,超过这个时间没有接收到心跳EurekaServer就会将这个实例剔除
#注意，EurekaServer一定要设置eureka.server.eviction-interval-timer-in-ms否则这个配置无效，这个配置一般为服务刷新时间配置的三倍
#如果该值太大，则很可能将流量转发过去的时候，该instance已经不存活了。
#如果该值设置太小了，则instance则很可能因为临时的网络抖动而被摘除掉。
#该值至少应该大于leaseRenewalIntervalInSeconds
#默认90s
eureka.instance.lease-expiration-duration-in-seconds=5
#服务刷新时间配置，每隔这个时间会主动心跳一次
#leaseRenewalIntervalInSeconds，表示eureka client发送心跳给server端的频率。
#如果在leaseExpirationDurationInSeconds后，server端没有收到client的心跳，则将摘除该instance。
#除此之外，如果该instance实现了HealthCheckCallback，并决定让自己unavailable的话，则该instance也不会接收到流量。
#默认30s
eureka.instance.lease-renewal-interval-in-seconds=2
#eureka匹配真是ip而不是hostname
eureka.instance.preferIpAddress=true
#eureka实例值，默认为：主机名：应用名：应用端口，${spring.cloud.client.hostname}:${spring.application.name}:${server.port}
eureka.instance.instance-id=${spring.cloud.client.ipAddress}:${server.port}



#######Eureka客户端配置

#是否将自身注册
eureka.client.registerWithEureka=true
#如果为true，第一个eureka启动会报错，启动会从eureka上获取apps注册信息，此时eureka还未启动.
eureka.client.fetchRegistry=true


#覆盖本地属性
spring.cloud.config.overrideNone=true




#防止剔除线程日志频繁打印
logging.level.com.netflix.eureka=ERROR