server.port=8010

spring.application.name=HJ-Decision-Flow

# 默认配置
# ioThreads = Math.max(Runtime.getRuntime().availableProcessors(), 2);
# workerThreads = ioThreads * 8;

# 设置IO线程数, 它主要执行非阻塞的任务,它们会负责多个连接, 默认设置每个CPU核心一个线程
server.undertow.io-threads=8

# 阻塞任务线程池, 当执行类似servlet请求阻塞操作, undertow会从这个线程池中取得线程,它的值设置取决于系统的负载
server.undertow.worker-threads=256

# 以下的配置会影响buffer,这些buffer会用于服务器连接的IO操作,有点类似netty的池化内存管理

# 每块buffer的空间大小,越小的空间被利用越充分
server.undertow.buffer-size=64

# 每个区分配的buffer数量 , 所以pool的大小是buffer-size * buffers-per-region
server.undertow.buffers-per-region=256

# 是否分配的直接内存
server.undertow.direct-buffers=true




# 模型接口服务url
app.model.url=http://hj-model.hzbd.com
# 超时毫秒
app.model.timeout=5000

# instinct服务url
app.instinct.url=http://fraudcheck.instinct.hzbd.com
# 超时毫秒
app.instinct.timeout=10000

# 数据接口服务url
app.interface.url=http://hj-api.hzbd.com/public/task/batch
# 超时毫秒
app.interface.timeout=5000

# REDIS (RedisProperties)
# Redis数据库索引（默认为0）
spring.redis.database=0
# Redis服务器地址
spring.redis.host=192.168.1.111
# Redis服务器连接端口
spring.redis.port=6379
# Redis服务器连接密码（默认为空）
spring.redis.password=123
# 连接池最大连接数（使用负值表示没有限制）
spring.redis.pool.max-active=4
# 连接池最大阻塞等待时间（使用负值表示没有限制）
spring.redis.pool.max-wait=-1
# 连接池中的最大空闲连接
spring.redis.pool.max-idle=4
# 连接池中的最小空闲连接
spring.redis.pool.min-idle=4
# 连接超时时间（毫秒）
spring.redis.timeout=30000


